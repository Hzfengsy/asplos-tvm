#!groovy
// -*- mode: groovy -*-

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

// Docker env used for testing
// Different image may have different version tag
// because some of them are more stable than anoter.
//
// Docker images are maintained by PMC, cached in dockerhub
// and remains relatively stable over the time.
// Flow for upgrading docker env(need commiter)
//
// - Send PR to upgrade build script in the repo
// - Build the new docker image
// - Tag the docker image with a new version and push to a binary cache.
// - Update the version in the Jenkinsfile, send a PR
// - Fix any issues wrt to the new image version in the PR
// - Merge the PR and now we are in new version
// - Tag the new version as the lates
// - Periodically cleanup the old versions on local workers
//

// ============================= IMPORTANT NOTE =============================
// This file is generated by 'jenkins/generate.py'. Do not edit this file directly!
// Make edits to 'jenkins/Jenkinsfile.j2' and regenerate this with
// 'python3 jenkins/generate.py'
// Note: This timestamp is here to ensure that updates to the Jenkinsfile are
// always rebased on main before merging:
// Generated at 2022-06-10T12:12:40.419262

import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
// NOTE: these lines are scanned by docker/dev_common.sh. Please update the regex as needed. -->
ci_lint = "tlcpack/ci-lint:v0.67"
ci_gpu = "tlcpack/ci-gpu:v0.78"
ci_cpu = "yuchenjin/ci-cpu"
ci_wasm = "tlcpack/ci-wasm:v0.71"
ci_i386 = "tlcpack/ci-i386:v0.74"
ci_qemu = "tlcpack/ci-qemu:v0.10"
ci_arm = "tlcpack/ci-arm:v0.07"
ci_hexagon = "tlcpack/ci-hexagon:v0.01"
// <--- End of regex-scanned config.

// Parameters to allow overriding (in Jenkins UI), the images
// to be used by a given build. When provided, they take precedence
// over default values above.
properties([
  parameters([
    string(name: 'ci_arm_param', defaultValue: ''),
    string(name: 'ci_cpu_param', defaultValue: ''),
    string(name: 'ci_gpu_param', defaultValue: ''),
    string(name: 'ci_hexagon_param', defaultValue: ''),
    string(name: 'ci_i386_param', defaultValue: ''),
    string(name: 'ci_lint_param', defaultValue: ''),
    string(name: 'ci_qemu_param', defaultValue: ''),
    string(name: 'ci_wasm_param', defaultValue: ''),
  ])
])

// Global variable assigned during Sanity Check that holds the sha1 which should be
// merged into the PR in all branches.
upstream_revision = null

// command to start a docker container
docker_run = 'docker/bash.sh --env CI --env TVM_SHARD_INDEX --env TVM_NUM_SHARDS --env RUN_DISPLAY_URL --env PLATFORM'
docker_build = 'docker/build.sh'
// timeout in minutes
max_time = 180
rebuild_docker_images = false

// skips builds from branch indexing; sourced from https://www.jvt.me/posts/2020/02/23/jenkins-multibranch-skip-branch-index/
// execute this before anything else, including requesting any time on an agent
if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
  print "INFO: Build skipped due to trigger being Branch Indexing"
  currentBuild.result = 'ABORTED' // optional, gives a better hint to the user that it's been skipped, rather than the default which shows it's successful
  return
}

// Filenames for stashing between build and test steps
s3_prefix = "tvm-jenkins-artifacts-prod/tvm/${env.BRANCH_NAME}/${env.BUILD_NUMBER}"


// General note: Jenkins has limits on the size of a method (or top level code)
// that are pretty strict, so most usage of groovy methods in these templates
// are purely to satisfy the JVM
def per_exec_ws(folder) {
  return "workspace/exec_${env.EXECUTOR_NUMBER}/" + folder
}

// initialize source codes
def init_git() {
  checkout scm


  // Add more info about job node
  sh (
    script: './tests/scripts/task_show_node_info.sh',
    label: 'Show executor node info',
  )

  // Determine merge commit to use for all stages
  sh (
    script: 'git fetch origin main',
    label: 'Fetch upstream',
  )
  if (upstream_revision == null) {
    upstream_revision = sh(
      script: 'git log -1 FETCH_HEAD --format=\'%H\'',
      label: 'Determine upstream revision',
      returnStdout: true,
    ).trim()
  }
  sh (
    script: "git -c user.name=TVM-Jenkins -c user.email=jenkins@tvm.apache.org merge ${upstream_revision}",
    label: 'Merge to origin/main'
  )

  sh(
    script: '''
      set -eux
      n=0
      max_retries=3
      backoff_max=30
      until [ "$n" -ge $max_retries ]
      do
          timeout 5m git submodule update --init -f --jobs 0 && break
          n=$((n+1))
          if [ "$n" -eq $max_retries ]; then
              echo "failed to update $n / $max_retries, giving up"
              exit 1
          fi

          WAIT=$((RANDOM % "$backoff_max"))
          echo "failed to update $n / $max_retries, waiting $WAIT to try again"
          sleep $WAIT
      done
    ''',
    label: 'Update git submodules',
  )
}

def docker_init(image) {
  // Clear out all Docker images that aren't going to be used
  sh(
    script: """
    set -eux
    docker image ls --all
    IMAGES=\$(docker image ls --all --format '{{.Repository}}:{{.Tag}}  {{.ID}}')

    echo -e "Found images:\\n\$IMAGES"
    echo "\$IMAGES" | { grep -vE '${image}' || test \$? = 1; } | { xargs docker rmi || test \$? = 123; }

    docker image ls --all
    """,
    label: 'Clean old Docker images',
  )

  if (image.contains("amazonaws.com")) {
    // If this string is in the image name it's from ECR and needs to be pulled
    // with the right credentials
    ecr_pull(image)
  } else {
    sh(
      script: "docker pull ${image}",
      label: 'Pull docker image',
    )
  }
}

def should_skip_slow_tests(pr_number) {
  withCredentials([string(
    credentialsId: 'tvm-bot-jenkins-reader',
    variable: 'GITHUB_TOKEN',
  )]) {
    // Exit code of 1 means run slow tests, exit code of 0 means skip slow tests
    result = sh (
      returnStatus: true,
      script: "./tests/scripts/should_run_slow_tests.py --pr '${pr_number}'",
      label: 'Check if CI should run slow tests',
    )
  }
  return result == 0
}

def cancel_previous_build() {
  // cancel previous build if it is not on main.
  if (env.BRANCH_NAME != 'main') {
    def buildNumber = env.BUILD_NUMBER as int
    // Milestone API allows us to cancel previous build
    // with the same milestone number
    if (buildNumber > 1) milestone(buildNumber - 1)
    milestone(buildNumber)
  }
}

def should_skip_ci(pr_number) {
  if (env.BRANCH_NAME == null || !env.BRANCH_NAME.startsWith('PR-')) {
    // never skip CI on build sourced from a branch
    return false
  }
  glob_skip_ci_code = sh (
    returnStatus: true,
    script: "./tests/scripts/git_skip_ci_globs.py",
    label: 'Check if CI should be skipped due to changed files',
  )
  if (glob_skip_ci_code == 0) {
    return true
  }
  withCredentials([string(
    credentialsId: 'tvm-bot-jenkins-reader',
    variable: 'TOKEN',
    )]) {
    // Exit code of 1 means run full CI (or the script had an error, so run
    // full CI just in case). Exit code of 0 means skip CI.
    git_skip_ci_code = sh (
      returnStatus: true,
      script: "./tests/scripts/git_skip_ci.py --pr '${pr_number}'",
      label: 'Check if CI should be skipped',
    )
  }
  return git_skip_ci_code == 0
}

def prepare() {
  stage('Prepare') {
    node('CPU-SMALL') {
      ws("workspace/exec_${env.EXECUTOR_NUMBER}/tvm/prepare") {
        init_git()
        ci_arm = params.ci_arm_param ?: ci_arm
        ci_cpu = params.ci_cpu_param ?: ci_cpu
        ci_gpu = params.ci_gpu_param ?: ci_gpu
        ci_hexagon = params.ci_hexagon_param ?: ci_hexagon
        ci_i386 = params.ci_i386_param ?: ci_i386
        ci_lint = params.ci_lint_param ?: ci_lint
        ci_qemu = params.ci_qemu_param ?: ci_qemu
        ci_wasm = params.ci_wasm_param ?: ci_wasm

        sh (script: """
          echo "Docker images being used in this build:"
          echo " ci_arm = ${ci_arm}"
          echo " ci_cpu = ${ci_cpu}"
          echo " ci_gpu = ${ci_gpu}"
          echo " ci_hexagon = ${ci_hexagon}"
          echo " ci_i386 = ${ci_i386}"
          echo " ci_lint = ${ci_lint}"
          echo " ci_qemu = ${ci_qemu}"
          echo " ci_wasm = ${ci_wasm}"
        """, label: 'Docker image names')

        is_docs_only_build = sh (
          returnStatus: true,
          script: './tests/scripts/git_change_docs.sh',
          label: 'Check for docs only changes',
        )
        skip_ci = should_skip_ci(env.CHANGE_ID)
        skip_slow_tests = should_skip_slow_tests(env.CHANGE_ID)
        rebuild_docker_images = sh (
          returnStatus: true,
          script: './tests/scripts/git_change_docker.sh',
          label: 'Check for any docker changes',
        )
        if (skip_ci) {
          // Don't rebuild when skipping CI
          rebuild_docker_images = false
        }
      }
    }
  }
}
def ecr_push(full_name) {
  aws_account_id = sh(
    returnStdout: true,
    script: 'aws sts get-caller-identity | grep Account | cut -f4 -d\\"',
    label: 'Get AWS ID'
  ).trim()

  def ecr_name = "${aws_account_id}.dkr.ecr.us-west-2.amazonaws.com/${full_name}"
  try {
    withEnv([
      "AWS_ACCOUNT_ID=${aws_account_id}",
      'AWS_DEFAULT_REGION=us-west-2',
      "AWS_ECR_REPO=${aws_account_id}.dkr.ecr.us-west-2.amazonaws.com"]) {
      sh(
        script: '''
          set -eux
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPO
        ''',
        label: 'Log in to ECR'
      )
      sh(
        script: """
          set -x
          docker tag ${full_name} \$AWS_ECR_REPO/${full_name}
          docker push \$AWS_ECR_REPO/${full_name}
        """,
        label: 'Upload image to ECR'
      )
    }
  } finally {
    withEnv([
      "AWS_ACCOUNT_ID=${aws_account_id}",
      'AWS_DEFAULT_REGION=us-west-2',
      "AWS_ECR_REPO=${aws_account_id}.dkr.ecr.us-west-2.amazonaws.com"]) {
      sh(
        script: 'docker logout $AWS_ECR_REPO',
        label: 'Clean up login credentials'
      )
    }
  }
  return ecr_name
}

def ecr_pull(full_name) {
  aws_account_id = sh(
    returnStdout: true,
    script: 'aws sts get-caller-identity | grep Account | cut -f4 -d\\"',
    label: 'Get AWS ID'
  ).trim()

  try {
    withEnv([
      "AWS_ACCOUNT_ID=${aws_account_id}",
      'AWS_DEFAULT_REGION=us-west-2',
      "AWS_ECR_REPO=${aws_account_id}.dkr.ecr.us-west-2.amazonaws.com"]) {
      sh(
        script: '''
          set -eux
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPO
        ''',
        label: 'Log in to ECR'
      )
      sh(
        script: """
          set -eux
          docker pull ${full_name}
        """,
        label: 'Pull image from ECR'
      )
    }
  } finally {
    withEnv([
      "AWS_ACCOUNT_ID=${aws_account_id}",
      'AWS_DEFAULT_REGION=us-west-2',
      "AWS_ECR_REPO=${aws_account_id}.dkr.ecr.us-west-2.amazonaws.com"]) {
      sh(
        script: 'docker logout $AWS_ECR_REPO',
        label: 'Clean up login credentials'
      )
    }
  }
}

def build_image(image_name) {
  hash = sh(
    returnStdout: true,
    script: 'git log -1 --format=\'%h\''
  ).trim()
  def full_name = "${image_name}:${env.BRANCH_NAME}-${hash}-${env.BUILD_NUMBER}"
  sh(
    script: "${docker_build} ${image_name} --spec ${full_name}",
    label: 'Build docker image'
  )
  return ecr_push(full_name)
}


def build_docker_images() {
  stage('Docker Image Build') {
    parallel(
      'ci_arm': {
        node('ARM') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_arm = build_image('ci_arm')
            build_image('ci_arm')
          }
        }
      },
      'ci_cpu': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_cpu = build_image('ci_cpu')
            build_image('ci_cpu')
          }
        }
      },
      'ci_gpu': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_gpu = build_image('ci_gpu')
            build_image('ci_gpu')
          }
        }
      },
      'ci_hexagon': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_hexagon = build_image('ci_hexagon')
            build_image('ci_hexagon')
          }
        }
      },
      'ci_i386': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_i386 = build_image('ci_i386')
            build_image('ci_i386')
          }
        }
      },
      'ci_lint': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_lint = build_image('ci_lint')
            build_image('ci_lint')
          }
        }
      },
      'ci_qemu': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_qemu = build_image('ci_qemu')
            build_image('ci_qemu')
          }
        }
      },
      'ci_wasm': {
        node('CPU') {
          timeout(time: max_time, unit: 'MINUTES') {
            init_git()
            // We're purposefully not setting the built image here since they
            // are not yet being uploaded to tlcpack
            // ci_wasm = build_image('ci_wasm')
            build_image('ci_wasm')
          }
        }
      },
    )
  }
}
def lint() {
  stage('Lint') {
    parallel(
  'Lint 1 of 2': {
    node('CPU-SMALL') {
      ws("workspace/exec_${env.EXECUTOR_NUMBER}/tvm/lint") {
        docker_init(ci_lint)
        init_git()
        timeout(time: max_time, unit: 'MINUTES') {
          withEnv([
            'TVM_NUM_SHARDS=2',
            'TVM_SHARD_INDEX=0'], {
            sh (
                script: "${docker_run} ${ci_lint} ./tests/scripts/task_lint.sh",
                label: 'Run lint',
              )
          })
        }
      }
    }
  }
  // // TODO: Once we are able to use the built images, enable this step
  // // If the docker images changed, we need to run the image build before the lint
  // // can run since it requires a base docker image. Most of the time the images
  // // aren't build though so it's faster to use the same node that checks for
  // // docker changes to run the lint in the usual case.
  // stage('Sanity Check (re-run)') {
  //   timeout(time: max_time, unit: 'MINUTES') {
  //     node('CPU') {
  //       ws("workspace/exec_${env.EXECUTOR_NUMBER}/tvm/sanity") {
  //         init_git()
  //         sh (
  //           script: "${docker_run} ${ci_lint}  ./tests/scripts/task_lint.sh",
  //           label: 'Run lint',
  //         )
  //       }
  //     }
  //   }
  // }
}

// Run make. First try to do an incremental make from a previous workspace in hope to
// accelerate the compilation. If something is wrong, clean the workspace and then
// build from scratch.
def make(docker_type, path, make_flag) {
  timeout(time: max_time, unit: 'MINUTES') {
    try {
      cmake_build(docker_type, path, make_flag)
      // always run cpp test when build
      // sh "${docker_run} ${docker_type} ./tests/scripts/task_cpp_unittest.sh"
    } catch (hudson.AbortException ae) {
      // script exited due to user abort, directly throw instead of retry
      if (ae.getMessage().contains('script returned exit code 143')) {
        throw ae
      }
    }
  },
    )
  }
}
def ci_setup(image) {
  sh (
    script: "${docker_run} ${image} ./tests/scripts/task_ci_setup.sh",
    label: 'Set up CI environment',
  )
}

def python_unittest(image) {
  sh (
    script: "${docker_run} ${image} ./tests/scripts/task_python_unittest.sh",
    label: 'Run Python unit tests',
  )
}

def fsim_test(image) {
  sh (
    script: "${docker_run} ${image} ./tests/scripts/task_python_vta_fsim.sh",
    label: 'Run VTA tests in FSIM',
  )
}

def cmake_build(image, path, make_flag) {
  sh (
    script: "${docker_run} --env CI_NUM_EXECUTORS ${image} ./tests/scripts/task_build.py --sccache-bucket tvm-sccache-prod",
    label: 'Run cmake build',
  )
}

def cpp_unittest(image) {
  sh (
    script: "${docker_run} --env CI_NUM_EXECUTORS ${image} ./tests/scripts/task_cpp_unittest.sh",
    label: 'Build and run C++ tests',
  )
}

stage('Build and Test') {
  if (is_docs_only_build != 1) {
    node('CPU') {
      ws(per_exec_ws('tvm/build-cpu')) {
        init_git()
        sh "${docker_run} ${ci_cpu} ./tests/scripts/task_config_build_cpu.sh"
        make(ci_cpu, 'build', '-j2')
        sh "${docker_run} ${ci_cpu} ./tests/scripts/task_python_integration.sh"
      }
    }
  } else {
    Utils.markStageSkippedForConditional('BUILD: CPU')
  }
}

// stage('Build') {
//     parallel 'BUILD: GPU': {
//       node('GPUBUILD') {
//         ws(per_exec_ws('tvm/build-gpu')) {
//           init_git()
//           sh "${docker_run} ${ci_gpu} ./tests/scripts/task_config_build_gpu.sh"
//           make(ci_gpu, 'build', '-j2')
//           pack_lib('gpu', tvm_multilib)
//           // compiler test
//           sh "${docker_run} ${ci_gpu} ./tests/scripts/task_config_build_gpu_other.sh"
//           make(ci_gpu, 'build2', '-j2')
//       }
//     }
//   },
//   'BUILD: CPU': {
//     if (is_docs_only_build != 1) {
//       node('CPU') {
//         ws(per_exec_ws('tvm/build-cpu')) {
//           init_git()
//           sh "${docker_run} ${ci_cpu} ./tests/scripts/task_config_build_cpu.sh"
//           make(ci_cpu, 'build', '-j2')
//           pack_lib('cpu', tvm_multilib_tsim)
//           timeout(time: max_time, unit: 'MINUTES') {
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_ci_setup.sh"
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_python_unittest.sh"
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_python_vta_fsim.sh"
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_python_vta_tsim.sh"
//             // sh "${docker_run} ${ci_cpu} ./tests/scripts/task_golang.sh"
//             // TODO(@jroesch): need to resolve CI issue will turn back on in follow up patch
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_rust.sh"
//             junit "build/pytest-results/*.xml"
//           }
//         }
//       }
//     } else {
//       Utils.markStageSkippedForConditional('BUILD: CPU')
//     }
//   },
//   'BUILD: WASM': {
//     if (is_docs_only_build != 1) {
//       node('CPU') {
//         ws(per_exec_ws('tvm/build-wasm')) {
//           init_git()
//           sh "${docker_run} ${ci_wasm} ./tests/scripts/task_config_build_wasm.sh"
//           make(ci_wasm, 'build', '-j2')
//           timeout(time: max_time, unit: 'MINUTES') {
//             sh "${docker_run} ${ci_wasm} ./tests/scripts/task_ci_setup.sh"
//             sh "${docker_run} ${ci_wasm} ./tests/scripts/task_web_wasm.sh"
//           }
//         }
//       }
//     } else {
//       Utils.markStageSkippedForConditional('BUILD: WASM')
//     }
//   },
//   'BUILD : i386': {
//     if ( is_docs_only_build != 1) {
//       node('CPU') {
//         ws(per_exec_ws('tvm/build-i386')) {
//           init_git()
//           sh "${docker_run} ${ci_i386} ./tests/scripts/task_config_build_i386.sh"
//           make(ci_i386, 'build', '-j2')
//           pack_lib('i386', tvm_multilib_tsim)
//         }
//       }
//     } else {
//       Utils.markStageSkippedForConditional('BUILD : i386')
//     }
//   },
//   'BUILD : arm': {
//     if (is_docs_only_build != 1) {
//       node('ARM') {
//         ws(per_exec_ws('tvm/build-arm')) {
//           init_git()
//           sh "${docker_run} ${ci_arm} ./tests/scripts/task_config_build_arm.sh"
//           make(ci_arm, 'build', '-j4')
//           pack_lib('arm', tvm_multilib)
//         }
//       }
//      } else {
//       Utils.markStageSkippedForConditional('BUILD : arm')
//     }
//   },
//   'BUILD: QEMU': {
//     if (is_docs_only_build != 1) {
//       node('CPU') {
//         ws(per_exec_ws('tvm/build-qemu')) {
//           init_git()
//           sh "${docker_run} ${ci_qemu} ./tests/scripts/task_config_build_qemu.sh"
//           make(ci_qemu, 'build', '-j2')
//           timeout(time: max_time, unit: 'MINUTES') {
//             sh "${docker_run} ${ci_qemu} ./tests/scripts/task_ci_setup.sh"
//             sh "${docker_run} ${ci_qemu} ./tests/scripts/task_python_microtvm.sh"
//             junit "build/pytest-results/*.xml"
//           }
//         }
//       }
//      } else {
//       Utils.markStageSkippedForConditional('BUILD: QEMU')
//     }
//   }
// }

// stage('Unit Test') {
//     parallel 'python3: GPU': {
//       if (is_docs_only_build != 1) {
//         node('TensorCore') {
//           ws(per_exec_ws('tvm/ut-python-gpu')) {
//             init_git()
//             unpack_lib('gpu', tvm_multilib)
//             timeout(time: max_time, unit: 'MINUTES') {
//               sh "${docker_run} ${ci_gpu} ./tests/scripts/task_ci_setup.sh"
//               sh "${docker_run} ${ci_gpu} ./tests/scripts/task_sphinx_precheck.sh"
//               sh "${docker_run} ${ci_gpu} ./tests/scripts/task_python_unittest_gpuonly.sh"
//               sh "${docker_run} ${ci_gpu} ./tests/scripts/task_python_integration_gpuonly.sh"
//               junit "build/pytest-results/*.xml"
//             }
//           }
//         }
//       } else {
//         Utils.markStageSkippedForConditional('python3: i386')
//       }
//     },
//     'python3: CPU': {
//       if (is_docs_only_build != 1) {
//         node('CPU') {
//           ws(per_exec_ws("tvm/ut-python-cpu")) {
//             init_git()
//             unpack_lib('cpu', tvm_multilib_tsim)
//             timeout(time: max_time, unit: 'MINUTES') {
//               sh "${docker_run} ${ci_cpu} ./tests/scripts/task_ci_setup.sh"
//               sh "${docker_run} ${ci_cpu} ./tests/scripts/task_python_integration.sh"
//               junit "build/pytest-results/*.xml"
//             }
//           }
//         }
//       } else {
//         Utils.markStageSkippedForConditional('python3: i386')
//       }
//     },
//     'python3: i386': {
//       if (is_docs_only_build != 1) {
//         node('CPU') {
//           ws(per_exec_ws('tvm/ut-python-i386')) {
//             init_git()
//             unpack_lib('i386', tvm_multilib)
//             timeout(time: max_time, unit: 'MINUTES') {
//               sh "${docker_run} ${ci_i386} ./tests/scripts/task_ci_setup.sh"
//               sh "${docker_run} ${ci_i386} ./tests/scripts/task_python_unittest.sh"
//               sh "${docker_run} ${ci_i386} ./tests/scripts/task_python_integration_i386only.sh"
//               sh "${docker_run} ${ci_i386} ./tests/scripts/task_python_vta_fsim.sh"
//               junit "build/pytest-results/*.xml"
//             }
//           }
//         }
//      } else {
//         Utils.markStageSkippedForConditional('python3: i386')
//       }
//     },
//     'python3: arm': {
//       if (is_docs_only_build != 1) {
//         node('ARM') {
//           ws(per_exec_ws('tvm/ut-python-arm')) {
//             init_git()
//             unpack_lib('arm', tvm_multilib)
//             timeout(time: max_time, unit: 'MINUTES') {
//               sh "${docker_run} ${ci_arm} ./tests/scripts/task_ci_setup.sh"
//               sh "${docker_run} ${ci_arm} ./tests/scripts/task_python_unittest.sh"
//               sh "${docker_run} ${ci_arm} ./tests/scripts/task_python_arm_compute_library.sh"
//               junit "build/pytest-results/*.xml"
//             // sh "${docker_run} ${ci_arm} ./tests/scripts/task_python_integration.sh"
//             }
//           }
//         }
//       } else {
//          Utils.markStageSkippedForConditional('python3: arm')
//       }
//     },
//     'java: GPU': {
//       if (is_docs_only_build != 1 ) {
//         node('GPU') {
//           ws(per_exec_ws('tvm/ut-java')) {
//             init_git()
//               unpack_lib('gpu', tvm_multilib)
//               timeout(time: max_time, unit: 'MINUTES') {
//                 sh "${docker_run} ${ci_gpu} ./tests/scripts/task_ci_setup.sh"
//                 sh "${docker_run} ${ci_gpu} ./tests/scripts/task_java_unittest.sh"
//               }
//           }
//         }
//       } else {
//          Utils.markStageSkippedForConditional('java: GPU')
//       }
//     }
// }

// stage('Integration Test') {
//   parallel 'topi: GPU': {
//   if (is_docs_only_build != 1) {
//     node('GPU') {
//       ws(per_exec_ws('tvm/topi-python-gpu')) {
//         init_git()
//         unpack_lib('gpu', tvm_multilib)
//         timeout(time: max_time, unit: 'MINUTES') {
//           sh "${docker_run} ${ci_gpu} ./tests/scripts/task_ci_setup.sh"
//           sh "${docker_run} ${ci_gpu} ./tests/scripts/task_python_topi.sh"
//           junit "build/pytest-results/*.xml"
//         }
//       }
//     }
//     } else {
//       Utils.markStageSkippedForConditional('topi: GPU')
//   }
//   },
//   'frontend: GPU': {
//     if (is_docs_only_build != 1) {
//       node('GPU') {
//         ws(per_exec_ws('tvm/frontend-python-gpu')) {
//           init_git()
//           unpack_lib('gpu', tvm_multilib)
//           timeout(time: max_time, unit: 'MINUTES') {
//             sh "${docker_run} ${ci_gpu} ./tests/scripts/task_ci_setup.sh"
//             sh "${docker_run} ${ci_gpu} ./tests/scripts/task_python_frontend.sh"
//             junit "build/pytest-results/*.xml"
//           }
//         }
//       }
//      } else {
//       Utils.markStageSkippedForConditional('frontend: GPU')
//     }
//   },
//   'frontend: CPU': {
//     if (is_docs_only_build != 1) {
//       node('CPU') {
//         ws(per_exec_ws('tvm/frontend-python-cpu')) {
//           init_git()
//           unpack_lib('cpu', tvm_multilib)
//           timeout(time: max_time, unit: 'MINUTES') {
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_ci_setup.sh"
//             sh "${docker_run} ${ci_cpu} ./tests/scripts/task_python_frontend_cpu.sh"
//             junit "build/pytest-results/*.xml"
//           }
//         }
//       }
//     } else {
//       Utils.markStageSkippedForConditional('frontend: CPU')
//     }
//   },
//   'docs: GPU': {
//     node('TensorCore') {
//       ws(per_exec_ws('tvm/docs-python-gpu')) {
//         init_git()
//         unpack_lib('gpu', tvm_multilib)
//         timeout(time: max_time, unit: 'MINUTES') {
//           sh "${docker_run} ${ci_gpu} ./tests/scripts/task_ci_setup.sh"
//           sh "${docker_run} ${ci_gpu} ./tests/scripts/task_python_docs.sh"
//         }
//         pack_lib('mydocs', 'docs.tgz')
//       }
//     }
//   }
// }

// /*
// stage('Build packages') {
//   parallel 'conda CPU': {
//     node('CPU') {
//       sh "${docker_run} tlcpack/conda-cpu ./conda/build_cpu.sh
//     }
//   },
//   'conda cuda': {
//     node('CPU') {
//       sh "${docker_run} tlcpack/conda-cuda90 ./conda/build_cuda.sh
//       sh "${docker_run} tlcpack/conda-cuda100 ./conda/build_cuda.sh
//     }
//   }
// // Here we could upload the packages to anaconda for releases
// // and/or the main branch
// }
// */

// stage('Deploy') {
//     node('doc') {
//       ws(per_exec_ws('tvm/deploy-docs')) {
//         if (env.BRANCH_NAME == 'main') {
//         unpack_lib('mydocs', 'docs.tgz')
//         sh 'cp docs.tgz /var/docs/docs.tgz'
//         sh 'tar xf docs.tgz -C /var/docs'
//         }
//       }
//     }
// }
